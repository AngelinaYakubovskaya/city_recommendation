import streamlit as st
import altair as alt
import pandas as pd
import json
from y import find_best_cities, load_cities_from_json, calculate_similarity, categorize_infrastructure, categorize_greenery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", page_icon="üèôÔ∏è", layout="wide")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with st.sidebar:
    st.image("https://cdn-icons-png.flaticon.com/512/684/684908.png", width=100)
    st.markdown("## üåá –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞")
    st.markdown(
        "–≠—Ç–æ—Ç —Å–∞–π—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å **–Ω–∞–∏–±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –≥–æ—Ä–æ–¥** –≤ –†–æ—Å—Å–∏–∏ "
        "–Ω–∞ –æ—Å–Ω–æ–≤–µ **–≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π** –ø–æ –∫–ª–∏–º–∞—Ç—É, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —Ä–∏—Ç–º—É –∂–∏–∑–Ω–∏ –∏ –¥—Ä—É–≥–∏–º —Ñ–∞–∫—Ç–æ—Ä–∞–º."
    )
    st.markdown("---")
    st.markdown("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üè° –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
cities = load_cities_from_json("cities.json")

# –í–≤–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
with st.form("preferences_form"):
    st.subheader("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")

    col1, col2, col3 = st.columns(3)

    with col1:
        climate = st.selectbox("–ö–ª–∏–º–∞—Ç", [1, 2, 3], format_func=lambda x: ["–•–æ–ª–æ–¥–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ñ–∞—Ä–∫–∏–π"][x-1])
        weather_stability = st.selectbox("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–≥–æ–¥—ã", [1, 2, 3], format_func=lambda x: ["–ù–µ –≤–∞–∂–Ω–æ", "–°—Ä–µ–¥–Ω—è—è", "–ò–∑–±–µ–≥–∞—é –ø–µ—Ä–µ–ø–∞–¥–æ–≤"][x-1])
        population = st.selectbox("–†–∞–∑–º–µ—Ä –≥–æ—Ä–æ–¥–∞", [1, 2, 3], format_func=lambda x: ["–î–æ 500 —Ç—ã—Å.", "500 —Ç—ã—Å. ‚Äì 1 –º–ª–Ω", "–ë–æ–ª–µ–µ 1 –º–ª–Ω"][x-1])
        city_rhythm = st.selectbox("–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ä–∏—Ç–º", [1, 2, 3], format_func=lambda x: ["–°–ø–æ–∫–æ–π–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–û–∂–∏–≤–ª—ë–Ω–Ω—ã–π"][x-1])

    with col2:
        infrastructure = st.slider("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", 1, 10, 5)
        greenery = st.slider("–£—Ä–æ–≤–µ–Ω—å –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—è", 1, 10, 5)
        safety = st.slider("–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 1, 10, 5)
        cultural_activities = st.slider("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏ –∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 1, 10, 5)

    with col3:
        work_mode = st.multiselect("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", [1, 2, 3], default=[1, 2], format_func=lambda x: ["–£–¥–∞–ª—ë–Ω–∫–∞", "–ù–∞—ë–º", "–°–≤–æ–π –±–∏–∑–Ω–µ—Å"][x-1])
        lifestyle = st.multiselect("–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", [1, 2, 3], default=[2], format_func=lambda x: ["–ê–∫—Ç–∏–≤–Ω—ã–π", "–°–∏–¥—è—á–∏–π", "–°—Ä–µ–¥–Ω–∏–π"][x-1])
        preferred_objects = st.multiselect("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", [1, 2, 3, 4], default=[1, 3], format_func=lambda x: ["–ë–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏", "–ö—É–ª—å—Ç—É—Ä–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ú–µ–¥–∏—Ü–∏–Ω–∞"][x-1])
        green_preference = st.selectbox("–û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤", [1, 2, 3], format_func=lambda x: ["–ü–∞—Ä–∫–∞—Ö —Ü–µ–Ω—Ç—Ä–∞", "–ü—Ä–∏—Ä–æ–¥–µ –∑–∞ –≥–æ—Ä–æ–¥–æ–º", "–û–±—â–µ–π —ç–∫–æ–ª–æ–≥–∏–∏"][x-1])

    submitted = st.form_submit_button("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞")

if submitted:
# –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ session_state
    st.session_state.user_prefs = {
        "climate": climate,
        "weather_stability": weather_stability,
        "population": population,
        "city_rhythm": city_rhythm,
        "infrastructure": categorize_infrastructure(infrastructure),
        "greenery": categorize_greenery(greenery),
        "safety": safety,
        "cultural_activities": cultural_activities,
        "work_mode": work_mode,
        "lifestyle": lifestyle,
        "preferred_objects": preferred_objects,
        "green_preference": green_preference
    }

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_prefs = st.session_state.user_prefs


  
    city_scores = [(city, calculate_similarity(city, user_prefs)) for city in cities]
    city_scores.sort(key=lambda x: x[1])
    recommended = city_scores[:5]

    if recommended:
        st.success(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(recommended)} –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤:")
    
        for city, score in recommended:
            with st.container():
                st.markdown("----")
                st.markdown(f"### üèôÔ∏è {city['name']}")
                with st.expander("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
                    st.markdown(f"**üìç –ù–∞—Å–µ–ª–µ–Ω–∏–µ:** {'–î–æ 500 —Ç—ã—Å.' if city['population'] == 1 else '500 —Ç—ã—Å. ‚Äì 1 –º–ª–Ω' if city['population'] == 2 else '–ë–æ–ª–µ–µ 1 –º–ª–Ω'}")
                    st.markdown(f"**üå°Ô∏è –ö–ª–∏–º–∞—Ç:** {['–•–æ–ª–æ–¥–Ω—ã–π', '–£–º–µ—Ä–µ–Ω–Ω—ã–π', '–ñ–∞—Ä–∫–∏–π'][city['climate'] - 1]}")
                    st.markdown(f"**üèóÔ∏è –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:** {city['infrastructure']} / 3")
                    st.markdown(f"**üå≥ –û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ:** {city['greenery']} / 3")
                    st.markdown(f"**üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** {city['safety']} / 10")
                    st.markdown(f"**üé≠ –ö—É–ª—å—Ç—É—Ä–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {city['cultural_activities']} / 10")
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        score_data = pd.DataFrame({
            "–ì–æ—Ä–æ–¥": [city["name"] for city, _ in recommended],
            "–°—Ö–æ–∂–µ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)": [score for _, score in recommended]})

        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
        st.subheader("üìä –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
        st.markdown("""
        –ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–ª—É—á–∏–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
        –í–∞–º —Å—Ç–æ–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ñ–∞–∫—Ç: "**–ß–µ–º –Ω–∏–∂–µ –±–∞–ª–ª-—Ç–µ–º –≤—ã—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º**".
        –° —É—á—ë—Ç–æ–º –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞–º –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏. 
        """)

        # –ì—Ä–∞—Ñ–∏–∫ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)
        chart = alt.Chart(score_data).mark_bar(color="#4C72B0").encode(
            x=alt.X("–°—Ö–æ–∂–µ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ):Q", title="–ë–∞–ª–ª—ã (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)"),
            y=alt.Y("–ì–æ—Ä–æ–¥:N", sort="-x"),
            tooltip=["–ì–æ—Ä–æ–¥", "–°—Ö–æ–∂–µ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)"]).properties(height=300)
        st.altair_chart(chart, use_container_width=True)
            
    else:
        st.warning("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

